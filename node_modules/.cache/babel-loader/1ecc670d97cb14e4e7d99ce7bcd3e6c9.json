{"ast":null,"code":"import { fork, take, call, put, delay, takeLatest } from \"redux-saga/effects\";\nimport * as workTypes from \"../constansts/work\";\nimport { getList } from '../apis/work';\nimport { showLoading, hideLoading } from '../actions/loading';\n;\nimport { fetchWorksSuccess, fetchWorksFailed } from '../actions/work';\nimport { toast } from 'react-toastify'; // các công việc đã thực hiện\n// bươc 1: xử lý hàm fetch_works\n// bước 2: thực hiện call api\n// bước 3: nếu success thì sẽ trả về data\n// bước 4: chạy hàm fetchWorksSuccess\n// bước 5: thực thi những hàm còn lại\n\nfunction* watchFetchListWorkAction() {\n  yield take(workTypes.FETCH_WORKS);\n  yield put(showLoading());\n  const res = yield call(getList);\n  const {\n    status,\n    data\n  } = res;\n\n  if (status === 200) {\n    yield put(fetchWorksSuccess(data));\n    yield toast.success(\"Lấy dữ liệu thành công\");\n  } else {\n    yield put(fetchWorksFailed(err));\n    yield toast.error(\"lấy dữ liệu thất bại\");\n  }\n\n  yield delay(1000);\n  yield put(hideLoading());\n}\n\nfunction* watchCreteWorkAction() {\n  console.log('watchCreteWorkAction');\n}\n\nfunction* rootSaga() {\n  yield fork(watchFetchListWorkAction);\n  yield fork(watchCreteWorkAction);\n  yield takeLatest(workTypes.FILTER_WORKS_SUCCESS, filterWork);\n  yield true;\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/home/thienncb/Desktop/redux-saga/src/sagas/index.js"],"names":["fork","take","call","put","delay","takeLatest","workTypes","getList","showLoading","hideLoading","fetchWorksSuccess","fetchWorksFailed","toast","watchFetchListWorkAction","FETCH_WORKS","res","status","data","success","err","error","watchCreteWorkAction","console","log","rootSaga","FILTER_WORKS_SUCCESS","filterWork"],"mappings":"AAAA,SAASA,IAAT,EAAeC,IAAf,EAAoBC,IAApB,EAAyBC,GAAzB,EAA6BC,KAA7B,EAAoCC,UAApC,QAAqD,oBAArD;AACA,OAAO,KAAKC,SAAZ,MAA2B,oBAA3B;AACA,SAAQC,OAAR,QAAsB,cAAtB;AACA,SAAQC,WAAR,EAAsBC,WAAtB,QAAwC,oBAAxC;AAA6D;AAC7D,SAAQC,iBAAR,EAA2BC,gBAA3B,QAAkD,iBAAlD;AACA,SAASC,KAAT,QAAsB,gBAAtB,C,CACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAUC,wBAAV,GAAqC;AACjC,QAAMZ,IAAI,CAACK,SAAS,CAACQ,WAAX,CAAV;AACA,QAAMX,GAAG,CAACK,WAAW,EAAZ,CAAT;AACA,QAAMO,GAAG,GAAG,MAAMb,IAAI,CAACK,OAAD,CAAtB;AACA,QAAM;AAACS,IAAAA,MAAD;AAASC,IAAAA;AAAT,MAAiBF,GAAvB;;AACA,MAAGC,MAAM,KAAK,GAAd,EAAkB;AACd,UAAMb,GAAG,CAACO,iBAAiB,CAACO,IAAD,CAAlB,CAAT;AACA,UAAML,KAAK,CAACM,OAAN,CAAc,wBAAd,CAAN;AACH,GAHD,MAGK;AACD,UAAMf,GAAG,CAACQ,gBAAgB,CAACQ,GAAD,CAAjB,CAAT;AACA,UAAMP,KAAK,CAACQ,KAAN,CAAY,sBAAZ,CAAN;AACH;;AACD,QAAMhB,KAAK,CAAC,IAAD,CAAX;AACA,QAAMD,GAAG,CAACM,WAAW,EAAZ,CAAT;AACF;;AACD,UAAUY,oBAAV,GAAiC;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACF;;AACF,UAAUC,QAAV,GAAoB;AAChB,QAAMxB,IAAI,CAACa,wBAAD,CAAV;AACA,QAAMb,IAAI,CAACqB,oBAAD,CAAV;AACA,QAAMhB,UAAU,CAACC,SAAS,CAACmB,oBAAX,EAAiCC,UAAjC,CAAhB;AACA,QAAM,IAAN;AACH;;AAGD,eAAeF,QAAf","sourcesContent":["import { fork, take,call,put,delay, takeLatest} from \"redux-saga/effects\";\nimport * as workTypes from \"../constansts/work\";\nimport {getList} from '../apis/work';\nimport {showLoading , hideLoading} from '../actions/loading';;\nimport {fetchWorksSuccess, fetchWorksFailed} from '../actions/work';\nimport { toast } from 'react-toastify';\n// các công việc đã thực hiện\n// bươc 1: xử lý hàm fetch_works\n// bước 2: thực hiện call api\n// bước 3: nếu success thì sẽ trả về data\n// bước 4: chạy hàm fetchWorksSuccess\n// bước 5: thực thi những hàm còn lại\nfunction* watchFetchListWorkAction() {\n    yield take(workTypes.FETCH_WORKS);\n    yield put(showLoading());\n    const res = yield call(getList);\n    const {status, data} = res;\n    if(status === 200){\n        yield put(fetchWorksSuccess(data));\n        yield toast.success(\"Lấy dữ liệu thành công\");\n    }else{\n        yield put(fetchWorksFailed(err));\n        yield toast.error(\"lấy dữ liệu thất bại\");\n    }\n    yield delay(1000);\n    yield put(hideLoading());\n }\n function* watchCreteWorkAction() {\n    console.log('watchCreteWorkAction');\n }\nfunction* rootSaga(){\n    yield fork(watchFetchListWorkAction);\n    yield fork(watchCreteWorkAction);\n    yield takeLatest(workTypes.FILTER_WORKS_SUCCESS, filterWork)\n    yield true;\n}\n\n\nexport default rootSaga;\n"]},"metadata":{},"sourceType":"module"}