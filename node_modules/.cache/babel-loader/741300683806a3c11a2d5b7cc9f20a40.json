{"ast":null,"code":"import { fork, take, call, put, delay, takeLatest, select, takeEvery } from \"redux-saga/effects\";\nimport * as workTypes from \"../constansts/work\";\nimport * as userTypes from \"../constansts/user\";\nimport { getList, addWork, updateWork, deleteWork, updateStatus } from '../apis/work';\nimport { showLoading, hideLoading } from '../actions/loading';\nimport { fetchWorksSuccess, fetchWorksFailed, addWorkSuccess, updateWorkSuccess, deleteWorkSuccess, updateStatusSuccess } from '../actions/work';\nimport { toast } from 'react-toastify';\nimport { signupSuccess, loginSuccess } from '../actions/user';\nimport { hideModal } from \"../actions/modal\";\nimport * as workApis from '../apis/work';\nimport { getUser, addUser } from '../apis/user';\n\nfunction* watchFetchListWorkAction() {\n  yield take(workTypes.FETCH_WORKS);\n  yield put(showLoading());\n  const userList = localStorage.getItem(\"user\");\n  const user = JSON.parse(userList);\n  const res = yield call(getList, user.id);\n  const {\n    status,\n    data,\n    err\n  } = res;\n\n  if (status === 200) {\n    yield put(fetchWorksSuccess(data));\n    yield toast.success(\"Get list work success\");\n  } else {\n    yield put(fetchWorksFailed(err));\n    yield toast.error(\"Get list work fail\");\n  }\n\n  yield delay(1000);\n  yield put(hideLoading());\n}\n\nfunction* filterWorkSaga({\n  payload\n}) {\n  const {\n    keyword\n  } = payload;\n  delay(500);\n  const userList = localStorage.getItem(\"user\");\n  const user = JSON.parse(userList);\n  const listWorks = yield workApis.getList(user.id).then(res => {\n    const {\n      data\n    } = res;\n    return data;\n  });\n  const filterWorks = listWorks.filter(work => work.name_work.trim().toLowerCase().includes(keyword.trim().toLowerCase()));\n  yield put(fetchWorksSuccess(filterWorks));\n}\n\nfunction* addWorkSaga({\n  payload\n}) {\n  const {\n    name_work,\n    description,\n    time,\n    userId,\n    status\n  } = payload.work;\n  yield put(showLoading());\n  const resp = yield call(addWork, {\n    name_work,\n    description,\n    time,\n    userId,\n    status\n  });\n  const {\n    data\n  } = resp;\n\n  if (resp.status === 201) {\n    yield put(addWorkSuccess(data));\n    yield toast.success(\"Successfully\");\n  } else {\n    yield toast.error(\"failure\");\n  }\n\n  yield put(hideModal());\n  delay(500);\n  yield put(hideLoading());\n}\n\nfunction* updateWorkSaga({\n  payload\n}) {\n  const {\n    name_work,\n    description,\n    time,\n    userId,\n    status\n  } = payload.work;\n  const workEditing = yield select(state => state.works.workEditing);\n  yield put(showLoading());\n  const resp = yield call(updateWork, {\n    name_work,\n    description,\n    time,\n    userId,\n    status\n  }, workEditing.id);\n  const {\n    data\n  } = resp;\n\n  if (resp.status === 200) {\n    yield put(updateWorkSuccess(data));\n    yield toast.success(\"update success\");\n  } else {\n    yield toast.error(\"update fail\");\n  }\n\n  yield put(hideModal());\n  delay(500);\n  yield put(hideLoading());\n}\n\nfunction* deleteWorkSaga({\n  payload\n}) {\n  const {\n    id\n  } = payload;\n  yield put(showLoading());\n  const res = yield call(deleteWork, id);\n  const {\n    data,\n    status\n  } = res;\n\n  if (status === 200) {\n    yield put(deleteWorkSuccess(data));\n    yield toast.success(\"delete success\");\n  } else {\n    yield toast.success(\"delete fail\");\n  }\n\n  delay(500);\n  yield put(hideLoading());\n}\n\nfunction* updateStatusSaga({\n  payload\n}) {\n  const {\n    id,\n    status\n  } = payload;\n  yield put(showLoading());\n  const resp = yield call(updateStatus, {\n    status: !status\n  }, id);\n  const {\n    data\n  } = resp;\n\n  if (resp.status === 200) {\n    yield put(updateStatusSuccess(data));\n    yield toast.success(\"update status success\");\n  } else {\n    yield toast.success(\"update status fail\");\n  }\n\n  yield put(hideModal());\n  delay(500);\n  yield put(hideLoading());\n}\n\nfunction* signupSaga({\n  payload\n}) {\n  const {\n    user\n  } = payload;\n  const {\n    name,\n    email,\n    password\n  } = user;\n  yield put(showLoading());\n  const listUsers = yield call(getUser);\n  var {\n    data\n  } = listUsers;\n  console.log(listUsers);\n  const userDung = data.map(userSever => {\n    if (userSever.email === email) {\n      return userSever.id;\n    }\n  });\n\n  if (userDung.join('')) {\n    toast.error(\"Email registered\");\n  } else {\n    const resp = yield call(addUser, {\n      name,\n      email,\n      password\n    });\n    var {\n      data\n    } = resp;\n\n    if (resp.status === 201) {\n      yield put(signupSuccess(data));\n      yield toast.success(\"Sign success\");\n\n      if (data) {\n        localStorage.setItem('user', JSON.stringify(data));\n      }\n    } else {\n      yield toast.error(\"Sign fail\");\n    }\n\n    var id = data.id;\n    const res = yield call(getList, id);\n    var {\n      status,\n      data\n    } = res;\n\n    if (status === 200) {\n      yield put(fetchWorksSuccess(data));\n    } else {\n      yield put(fetchWorksFailed(err));\n    }\n  }\n\n  delay(500);\n  yield put(hideLoading());\n}\n\nfunction* loginSaga({\n  payload\n}) {\n  const {\n    user\n  } = payload;\n  const {\n    email,\n    password\n  } = user;\n  yield put(showLoading());\n  const resp = yield call(getUser);\n  var {\n    data\n  } = resp;\n  const userDung = data.map(userSever => {\n    if (userSever.email === email && userSever.password === password) {\n      localStorage.setItem('user', JSON.stringify(userSever));\n      return userSever.id;\n    }\n  });\n  var id = userDung.join('');\n  yield put(loginSuccess(user));\n  const res = yield call(getList, id);\n  var {\n    status,\n    data\n  } = res;\n\n  if (status === 200) {\n    yield put(fetchWorksSuccess(data));\n    yield toast.success(\"\");\n  } else {\n    yield put(fetchWorksFailed(err));\n    yield toast.error(\"lấy dữ liệu thất bại\");\n  }\n\n  delay(500);\n  yield put(hideLoading());\n}\n\nfunction* logoutSaga() {\n  yield put(showLoading());\n  yield localStorage.clear();\n  yield delay(1000);\n  yield put(hideLoading());\n}\n\nfunction* rootSaga() {\n  yield takeLatest(userTypes.SIGNUP, signupSaga);\n  yield takeEvery(userTypes.LOGIN, loginSaga);\n  const user = localStorage.getItem(\"user\");\n\n  if (user) {\n    yield fork(watchFetchListWorkAction);\n  }\n\n  yield takeEvery(userTypes.LOGOUT, logoutSaga);\n  yield takeLatest(workTypes.FILTER_WORKS, filterWorkSaga);\n  yield takeLatest(workTypes.ADD_WORKS, addWorkSaga);\n  yield takeLatest(workTypes.UPDATE_WORKS, updateWorkSaga);\n  yield takeLatest(workTypes.DELETE_WORKS, deleteWorkSaga);\n  yield takeLatest(workTypes.UPDATE_STATUS, updateStatusSaga);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/home/thienncb/Desktop/redux-saga/src/sagas/index.js"],"names":["fork","take","call","put","delay","takeLatest","select","takeEvery","workTypes","userTypes","getList","addWork","updateWork","deleteWork","updateStatus","showLoading","hideLoading","fetchWorksSuccess","fetchWorksFailed","addWorkSuccess","updateWorkSuccess","deleteWorkSuccess","updateStatusSuccess","toast","signupSuccess","loginSuccess","hideModal","workApis","getUser","addUser","watchFetchListWorkAction","FETCH_WORKS","userList","localStorage","getItem","user","JSON","parse","res","id","status","data","err","success","error","filterWorkSaga","payload","keyword","listWorks","then","filterWorks","filter","work","name_work","trim","toLowerCase","includes","addWorkSaga","description","time","userId","resp","updateWorkSaga","workEditing","state","works","deleteWorkSaga","updateStatusSaga","signupSaga","name","email","password","listUsers","console","log","userDung","map","userSever","join","setItem","stringify","loginSaga","logoutSaga","clear","rootSaga","SIGNUP","LOGIN","LOGOUT","FILTER_WORKS","ADD_WORKS","UPDATE_WORKS","DELETE_WORKS","UPDATE_STATUS"],"mappings":"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","sourcesContent":["import {\n    fork,\n    take,\n    call,\n    put,\n    delay,\n    takeLatest,\n    select,\n    takeEvery\n} from \"redux-saga/effects\";\nimport * as workTypes from \"../constansts/work\";\nimport * as userTypes from \"../constansts/user\";\nimport {\n    getList,\n    addWork,\n    updateWork,\n    deleteWork,\n    updateStatus\n} from '../apis/work';\nimport {showLoading, hideLoading} from '../actions/loading';\n\n\nimport {\n    fetchWorksSuccess,\n    fetchWorksFailed,\n    addWorkSuccess,\n    updateWorkSuccess,\n    deleteWorkSuccess,\n    updateStatusSuccess\n} from '../actions/work';\nimport {toast} from 'react-toastify';\nimport {signupSuccess, loginSuccess} from '../actions/user';\nimport {hideModal} from \"../actions/modal\";\nimport * as workApis from '../apis/work';\nimport {getUser, addUser} from '../apis/user';\n\nfunction* watchFetchListWorkAction() {\n    yield take(workTypes.FETCH_WORKS);\n    yield put(showLoading());\n    const userList = localStorage.getItem(\"user\");\n    const user = JSON.parse(userList);\n    const res = yield call(getList, user.id);\n    const {status, data, err} = res;\n    if (status === 200) {\n        yield put(fetchWorksSuccess(data));\n        yield toast.success(\"Get list work success\");\n    } else {\n        yield put(fetchWorksFailed(err));\n        yield toast.error(\"Get list work fail\");\n    }\n    yield delay(1000);\n    yield put(hideLoading());\n}\n\nfunction* filterWorkSaga({payload}) {\n    const {keyword} = payload;\n    delay(500);\n    const userList = localStorage.getItem(\"user\");\n    const user = JSON.parse(userList);\n    const listWorks = yield workApis.getList(user.id).then(res => {\n        const {data} = res;\n        return data;\n    });\n    const filterWorks = listWorks.filter(\n        work => work.name_work\n            .trim()\n            .toLowerCase()\n            .includes(keyword.trim().toLowerCase())\n    );\n    yield put(fetchWorksSuccess(filterWorks));\n}\n\nfunction* addWorkSaga({payload}) {\n    const {name_work, description, time, userId, status} = payload.work;\n    yield put(showLoading());\n    const resp = yield call(addWork, {\n        name_work,\n        description,\n        time,\n        userId,\n        status\n    });\n    const {data} = resp;\n    if (resp.status === 201) {\n        yield put(addWorkSuccess(data));\n        yield toast.success(\"Successfully\");\n    } else {\n        yield toast.error(\"failure\");\n    }\n    yield put(hideModal());\n    delay(500);\n    yield put(hideLoading());\n\n}\n\nfunction* updateWorkSaga({payload}) {\n    const {name_work, description, time, userId, status} = payload.work;\n    const workEditing = yield select(state => state.works.workEditing);\n    yield put(showLoading());\n    const resp = yield call(updateWork, {\n        name_work,\n        description,\n        time,\n        userId,\n        status\n    }, workEditing.id);\n    const {data} = resp;\n    if (resp.status === 200) {\n        yield put(updateWorkSuccess(data));\n        yield toast.success(\"update success\");\n    } else {\n        yield toast.error(\"update fail\");\n    }\n    yield put(hideModal());\n    delay(500);\n    yield put(hideLoading());\n}\n\nfunction* deleteWorkSaga({payload}) {\n    const {id} = payload;\n    yield put(showLoading());\n    const res = yield call(deleteWork, id);\n    const {data, status} = res;\n    if (status === 200) {\n        yield put(deleteWorkSuccess(data));\n        yield toast.success(\"delete success\");\n    } else {\n        yield toast.success(\"delete fail\");\n    }\n\n    delay(500);\n    yield put(hideLoading());\n\n}\n\nfunction* updateStatusSaga({payload}) {\n    const {id, status} = payload;\n    yield put(showLoading());\n\n    const resp = yield call(updateStatus, {\n        status: !status\n    }, id);\n    const {data} = resp;\n    if (resp.status === 200) {\n        yield put(updateStatusSuccess(data));\n        yield toast.success(\"update status success\");\n    }else{\n        yield toast.success(\"update status fail\");\n    }\n    yield put(hideModal());\n    delay(500);\n    yield put(hideLoading());\n}\n\nfunction* signupSaga({payload}) {\n    const {user} = payload;\n    const {name, email, password} = user;\n    yield put(showLoading());\n    const listUsers = yield call(getUser);\n    var {data} = listUsers;\n    console.log(listUsers);\n    const userDung = data.map(userSever => {\n        if (userSever.email === email) {\n            return userSever.id;\n        }\n    });\n\n    if (userDung.join('')) {\n        toast.error(\"Email registered\");\n    } else {\n        const resp = yield call(addUser, {\n            name,\n            email,\n            password\n        });\n        var {data} = resp;\n        if (resp.status === 201) {\n            yield put(signupSuccess(data));\n            yield toast.success(\"Sign success\");\n            if (data) {\n                localStorage.setItem('user', JSON.stringify(data));\n            }\n        } else {\n            yield toast.error(\"Sign fail\");\n        }\n        var id = data.id;\n        const res = yield call(getList, id);\n        var {status, data} = res;\n        if (status === 200) {\n            yield put(fetchWorksSuccess(data));\n        } else {\n            yield put(fetchWorksFailed(err));\n        }\n    }\n\n    delay(500);\n    yield put(hideLoading());\n}\n\nfunction* loginSaga({payload}) {\n    const {user} = payload;\n    const {email, password} = user;\n    yield put(showLoading());\n    const resp = yield call(getUser);\n    var {data} = resp;\n    const userDung = data.map(userSever => {\n        if (userSever.email === email && userSever.password === password) {\n            localStorage.setItem('user', JSON.stringify(userSever));\n            return userSever.id;\n        }\n    });\n    var id = userDung.join('');\n    yield put(loginSuccess(user));\n    const res = yield call(getList, id);\n    var {status, data} = res;\n    if (status === 200) {\n        yield put(fetchWorksSuccess(data));\n        yield toast.success(\"\");\n    } else {\n        yield put(fetchWorksFailed(err));\n        yield toast.error(\"lấy dữ liệu thất bại\");\n    }\n    delay(500);\n    yield put(hideLoading());\n}\n\nfunction* logoutSaga() {\n    yield put(showLoading());\n    yield localStorage.clear();\n    yield delay(1000);\n    yield put(hideLoading());\n}\n\nfunction* rootSaga() {\n    yield takeLatest(userTypes.SIGNUP, signupSaga);\n    yield takeEvery(userTypes.LOGIN, loginSaga);\n    const user = localStorage.getItem(\"user\");\n    if (user) {\n        yield fork(watchFetchListWorkAction);\n    }\n    yield takeEvery(userTypes.LOGOUT, logoutSaga);\n    yield takeLatest(workTypes.FILTER_WORKS, filterWorkSaga);\n    yield takeLatest(workTypes.ADD_WORKS, addWorkSaga);\n    yield takeLatest(workTypes.UPDATE_WORKS, updateWorkSaga);\n    yield takeLatest(workTypes.DELETE_WORKS, deleteWorkSaga);\n    yield takeLatest(workTypes.UPDATE_STATUS, updateStatusSaga);\n\n}\n\n\nexport default rootSaga;\n"]},"metadata":{},"sourceType":"module"}