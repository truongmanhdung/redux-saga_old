{"ast":null,"code":"import * as workTypes from \"../constansts/work\";\nimport * as userTypes from \"../constansts/user\";\nconst initialState = {};\n\nconst myReducers = (state = initialState, action) => {\n  switch (action.type) {\n    case workTypes.FETCH_WORKS:\n      {\n        return { ...state,\n          listWorks: [],\n          workEditing: null\n        };\n      }\n\n    case workTypes.FETCH_WORKS_SUCCESS:\n      {\n        const {\n          data\n        } = action.payload;\n        return { ...state,\n          listWorks: data\n        };\n      }\n\n    case workTypes.FETCH_WORKS_FAILED:\n      {\n        const {\n          err\n        } = action.payload;\n        return { ...state,\n          listWorks: []\n        };\n      }\n\n    case workTypes.ADD_WORKS:\n      {\n        return { ...state\n        };\n      }\n\n    case workTypes.ADD_WORK_SUCCESS:\n      {\n        const {\n          work\n        } = action.payload;\n        state.listWorks.push(work);\n        return { ...state,\n          listWorks: state.listWorks\n        };\n      }\n\n    case workTypes.EDIT_WORKS:\n      {\n        const {\n          work\n        } = action.payload;\n        return { ...state,\n          workEditing: work\n        };\n      }\n    // case workTypes.FILTER_WORKS: {\n    //     return ;\n    // };\n\n    case workTypes.FILTER_WORKS_SUCCESS:\n      {\n        const {\n          data\n        } = action.payload;\n        return { ...state,\n          listWorks: data\n        };\n      }\n\n    case workTypes.UPDATE_WORKS:\n      {\n        return { ...state\n        };\n      }\n\n    case workTypes.UPDATE_WORK_SUCCESS:\n      {\n        const {\n          data\n        } = action.payload;\n        const {\n          listWorks\n        } = state;\n        const index = listWorks.findIndex(item => item.id === data.id);\n\n        if (index !== -1) {\n          const newList = [...listWorks.slice(0, index), data, ...listWorks.slice(index + 1)];\n          return { ...state,\n            listWorks: newList\n          };\n        } else {\n          return { ...state\n          };\n        }\n      }\n\n    case workTypes.DELETE_WORKS:\n      {\n        return { ...state\n        };\n      }\n\n    case workTypes.DELETE_WORK_SUCCESS:\n      {\n        const {\n          data\n        } = action.payload;\n        return { ...state,\n          listWorks: state.listWorks.filter(item => item.id !== data.id)\n        };\n      }\n\n    case workTypes.UPDATE_STATUS:\n      {\n        return { ...state\n        };\n      }\n\n    case workTypes.UPDATE_STATUS_SUCCESS:\n      {\n        const {\n          data\n        } = action.payload;\n        const {\n          listWorks\n        } = state;\n        const index = listWorks.findIndex(item => item.id === data.id);\n\n        if (index !== -1) {\n          const newList = [...listWorks.slice(0, index), data, ...listWorks.slice(index + 1)];\n          return { ...state,\n            listWorks: newList\n          };\n        } else {\n          return { ...state\n          };\n        }\n      }\n\n    case userTypes.LOGOUT:\n      {\n        return { ...state,\n          listWorks: []\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default myReducers;","map":{"version":3,"sources":["/home/thienncb/Desktop/redux-saga/src/reducers/works.js"],"names":["workTypes","userTypes","initialState","myReducers","state","action","type","FETCH_WORKS","listWorks","workEditing","FETCH_WORKS_SUCCESS","data","payload","FETCH_WORKS_FAILED","err","ADD_WORKS","ADD_WORK_SUCCESS","work","push","EDIT_WORKS","FILTER_WORKS_SUCCESS","UPDATE_WORKS","UPDATE_WORK_SUCCESS","index","findIndex","item","id","newList","slice","DELETE_WORKS","DELETE_WORK_SUCCESS","filter","UPDATE_STATUS","UPDATE_STATUS_SUCCESS","LOGOUT"],"mappings":"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","sourcesContent":["import * as workTypes from \"../constansts/work\";\nimport * as userTypes from \"../constansts/user\";\nconst initialState = {};\n\nconst myReducers = (state = initialState, action) => {\n    switch (action.type) {\n        case workTypes.FETCH_WORKS: {\n            return {\n                ...state,\n                listWorks: [],\n                workEditing: null,\n            };\n        }\n        case workTypes.FETCH_WORKS_SUCCESS: {  \n            const { data } = action.payload;\n            return {\n                ...state,\n                listWorks: data,\n            };\n        }\n        case workTypes.FETCH_WORKS_FAILED: {\n            const { err } = action.payload;\n            return {\n                ...state,\n                listWorks: [],\n            };\n        }\n        case workTypes.ADD_WORKS: {\n            return {\n                ...state,\n            };\n        }\n        case workTypes.ADD_WORK_SUCCESS: {\n            const { work } = action.payload;\n            state.listWorks.push(work);\n            return {\n                ...state,\n                listWorks: state.listWorks,\n            };\n        }\n        case workTypes.EDIT_WORKS: {\n            const { work } = action.payload;\n            return {\n                ...state,\n                workEditing: work,\n            };\n        }\n        // case workTypes.FILTER_WORKS: {\n        //     return ;\n        // };\n\n        case workTypes.FILTER_WORKS_SUCCESS: {\n            const { data } = action.payload;\n            return {\n                ...state,\n                listWorks: data,\n            };\n        }\n        case workTypes.UPDATE_WORKS: {\n            return {\n                ...state,\n            };\n        }\n        case workTypes.UPDATE_WORK_SUCCESS: {\n            const { data } = action.payload;\n            const { listWorks } = state;\n            const index = listWorks.findIndex((item) => item.id === data.id);\n            if (index !== -1) {\n                const newList = [\n                    ...listWorks.slice(0, index),\n                    data,\n                    ...listWorks.slice(index + 1),\n                ];\n                return {\n                    ...state,\n                    listWorks: newList,\n                };\n            } else {\n                return {\n                    ...state,\n                };\n            }\n        }\n        case workTypes.DELETE_WORKS: {\n            return {\n                ...state,\n            };\n        }\n        case workTypes.DELETE_WORK_SUCCESS: {\n            const { data } = action.payload;\n            return {\n                ...state,\n                listWorks: state.listWorks.filter(\n                    (item) => item.id !== data.id\n                ),\n            };\n        }\n        case workTypes.UPDATE_STATUS: {\n            return {\n                ...state,\n            };\n        }\n        case workTypes.UPDATE_STATUS_SUCCESS: {\n            const { data } = action.payload;\n            const { listWorks } = state;\n            const index = listWorks.findIndex((item) => item.id === data.id);\n            if (index !== -1) {\n                const newList = [\n                    ...listWorks.slice(0, index),\n                    data,\n                    ...listWorks.slice(index + 1),\n                ];\n                return {\n                    ...state,\n                    listWorks: newList,\n                };\n            } else {\n                return {\n                    ...state,\n                };\n            }\n        }\n        case userTypes.LOGOUT: {\n            return {\n                ...state,\n                listWorks: [],\n            };\n        }\n        default:\n            return state;\n    }\n};\n\nexport default myReducers;\n"]},"metadata":{},"sourceType":"module"}