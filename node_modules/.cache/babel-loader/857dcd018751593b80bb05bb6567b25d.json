{"ast":null,"code":"import { fork, take, call, put, delay, takeLatest, select } from \"redux-saga/effects\";\nimport * as workTypes from \"../constansts/work\";\nimport { getList } from '../apis/work';\nimport { showLoading, hideLoading } from '../actions/loading';\n;\nimport { fetchWorksSuccess, fetchWorksFailed } from '../actions/work';\nimport { toast } from 'react-toastify'; // các công việc đã thực hiện\n// bươc 1: xử lý hàm fetch_works\n// bước 2: thực hiện call api\n// bước 3: nếu success thì sẽ trả về data\n// bước 4: chạy hàm fetchWorksSuccess\n// bước 5: thực thi những hàm còn lại\n\nfunction* watchFetchListWorkAction() {\n  yield take(workTypes.FETCH_WORKS);\n  yield put(showLoading());\n  const res = yield call(getList);\n  const {\n    status,\n    data\n  } = res;\n\n  if (status === 200) {\n    yield put(fetchWorksSuccess(data));\n    yield toast.success(\"Lấy dữ liệu thành công\");\n  } else {\n    yield put(fetchWorksFailed(err));\n    yield toast.error(\"lấy dữ liệu thất bại\");\n  }\n\n  yield delay(1000);\n  yield put(hideLoading());\n}\n\nfunction* filterWorkSaga({\n  payload\n}) {\n  yield delay(500);\n  const keyword = payload;\n  console.log(keyword);\n  const listWorks = yield select(state => state.works.listWorks);\n  console.log(listWorks);\n  const filterWorks = listWorks.filter(work => {\n    return work.to().includes(keyword);\n  }); //  const filterWorks = listWorks.filter(\n  //         work => work.name_work\n  //         .trim()\n  //         .toLowerCase()\n  //         .includes(keyword.trim().toLowerCase())\n  //  );\n\n  console.log(filterWorks);\n}\n\nfunction* rootSaga() {\n  yield fork(watchFetchListWorkAction);\n  yield takeLatest(workTypes.FILTER_WORKS, filterWorkSaga);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/home/thienncb/Desktop/redux-saga/src/sagas/index.js"],"names":["fork","take","call","put","delay","takeLatest","select","workTypes","getList","showLoading","hideLoading","fetchWorksSuccess","fetchWorksFailed","toast","watchFetchListWorkAction","FETCH_WORKS","res","status","data","success","err","error","filterWorkSaga","payload","keyword","console","log","listWorks","state","works","filterWorks","filter","work","to","includes","rootSaga","FILTER_WORKS"],"mappings":"AAAA,SAASA,IAAT,EAAeC,IAAf,EAAoBC,IAApB,EAAyBC,GAAzB,EAA6BC,KAA7B,EAAoCC,UAApC,EAAgDC,MAAhD,QAA6D,oBAA7D;AACA,OAAO,KAAKC,SAAZ,MAA2B,oBAA3B;AACA,SAAQC,OAAR,QAAsB,cAAtB;AACA,SAAQC,WAAR,EAAsBC,WAAtB,QAAwC,oBAAxC;AAA6D;AAC7D,SAAQC,iBAAR,EAA2BC,gBAA3B,QAAkD,iBAAlD;AACA,SAASC,KAAT,QAAsB,gBAAtB,C,CACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAUC,wBAAV,GAAqC;AACjC,QAAMb,IAAI,CAACM,SAAS,CAACQ,WAAX,CAAV;AACA,QAAMZ,GAAG,CAACM,WAAW,EAAZ,CAAT;AACA,QAAMO,GAAG,GAAG,MAAMd,IAAI,CAACM,OAAD,CAAtB;AACA,QAAM;AAACS,IAAAA,MAAD;AAASC,IAAAA;AAAT,MAAiBF,GAAvB;;AACA,MAAGC,MAAM,KAAK,GAAd,EAAkB;AACd,UAAMd,GAAG,CAACQ,iBAAiB,CAACO,IAAD,CAAlB,CAAT;AACA,UAAML,KAAK,CAACM,OAAN,CAAc,wBAAd,CAAN;AACH,GAHD,MAGK;AACD,UAAMhB,GAAG,CAACS,gBAAgB,CAACQ,GAAD,CAAjB,CAAT;AACA,UAAMP,KAAK,CAACQ,KAAN,CAAY,sBAAZ,CAAN;AACH;;AACD,QAAMjB,KAAK,CAAC,IAAD,CAAX;AACA,QAAMD,GAAG,CAACO,WAAW,EAAZ,CAAT;AACF;;AACD,UAAUY,cAAV,CAAyB;AAACC,EAAAA;AAAD,CAAzB,EAAmC;AAC/B,QAAMnB,KAAK,CAAC,GAAD,CAAX;AACA,QAAMoB,OAAO,GAAGD,OAAhB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,QAAMG,SAAS,GAAG,MAAMrB,MAAM,CAACsB,KAAK,IAAGA,KAAK,CAACC,KAAN,CAAYF,SAArB,CAA9B;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ;AACA,QAAMG,WAAW,GAAGH,SAAS,CAACI,MAAV,CAAkBC,IAAD,IAAQ;AAC1C,WAAOA,IAAI,CAACC,EAAL,GAAUC,QAAV,CAAmBV,OAAnB,CAAP;AACF,GAFmB,CAApB,CAN+B,CAShC;AACA;AACA;AACA;AACA;AAEA;;AACCC,EAAAA,OAAO,CAACC,GAAR,CAAYI,WAAZ;AACH;;AACF,UAAUK,QAAV,GAAoB;AAChB,QAAMnC,IAAI,CAACc,wBAAD,CAAV;AACA,QAAMT,UAAU,CAACE,SAAS,CAAC6B,YAAX,EAAyBd,cAAzB,CAAhB;AACH;;AAGD,eAAea,QAAf","sourcesContent":["import { fork, take,call,put,delay, takeLatest, select} from \"redux-saga/effects\";\nimport * as workTypes from \"../constansts/work\";\nimport {getList} from '../apis/work';\nimport {showLoading , hideLoading} from '../actions/loading';;\nimport {fetchWorksSuccess, fetchWorksFailed} from '../actions/work';\nimport { toast } from 'react-toastify';\n// các công việc đã thực hiện\n// bươc 1: xử lý hàm fetch_works\n// bước 2: thực hiện call api\n// bước 3: nếu success thì sẽ trả về data\n// bước 4: chạy hàm fetchWorksSuccess\n// bước 5: thực thi những hàm còn lại\nfunction* watchFetchListWorkAction() {\n    yield take(workTypes.FETCH_WORKS);\n    yield put(showLoading());\n    const res = yield call(getList);\n    const {status, data} = res;\n    if(status === 200){\n        yield put(fetchWorksSuccess(data));\n        yield toast.success(\"Lấy dữ liệu thành công\");\n    }else{\n        yield put(fetchWorksFailed(err));\n        yield toast.error(\"lấy dữ liệu thất bại\");\n    }\n    yield delay(1000);\n    yield put(hideLoading());\n }\n function* filterWorkSaga({payload}){\n     yield delay(500);\n     const keyword = payload;\n     console.log(keyword);\n     const listWorks = yield select(state=> state.works.listWorks);\n     console.log(listWorks);\n     const filterWorks = listWorks.filter((work)=>{\n        return work.to().includes(keyword);\n     });\n    //  const filterWorks = listWorks.filter(\n    //         work => work.name_work\n    //         .trim()\n    //         .toLowerCase()\n    //         .includes(keyword.trim().toLowerCase())\n            \n    //  );\n     console.log(filterWorks);\n }\nfunction* rootSaga(){\n    yield fork(watchFetchListWorkAction);\n    yield takeLatest(workTypes.FILTER_WORKS, filterWorkSaga)\n}\n\n\nexport default rootSaga;\n"]},"metadata":{},"sourceType":"module"}