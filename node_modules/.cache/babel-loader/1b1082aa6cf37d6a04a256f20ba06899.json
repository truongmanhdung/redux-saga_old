{"ast":null,"code":"import { fork, take, call, put, delay, takeLatest, select, takeEvery } from \"redux-saga/effects\";\nimport * as workTypes from \"../constansts/work\";\nimport { getList, addWork } from '../apis/work';\nimport { showLoading, hideLoading } from '../actions/loading';\n;\nimport { fetchWorksSuccess, fetchWorksFailed, addWorkSuccess } from '../actions/work';\nimport { toast } from 'react-toastify';\nimport { hideModal } from \"../actions/modal\";\nimp; // các công việc đã thực hiện\n// bươc 1: xử lý hàm fetch_works\n// bước 2: thực hiện call api\n// bước 3: nếu success thì sẽ trả về data\n// bước 4: chạy hàm fetchWorksSuccess\n// bước 5: thực thi những hàm còn lại\n\nfunction* watchFetchListWorkAction() {\n  yield take(workTypes.FETCH_WORKS);\n  yield put(showLoading());\n  const res = yield call(getList);\n  const {\n    status,\n    data\n  } = res;\n\n  if (status === 200) {\n    yield put(fetchWorksSuccess(data));\n    yield toast.success(\"Lấy dữ liệu thành công\");\n  } else {\n    yield put(fetchWorksFailed(err));\n    yield toast.error(\"lấy dữ liệu thất bại\");\n  }\n\n  yield delay(1000);\n  yield put(hideLoading());\n}\n\nfunction* filterWorkSaga({\n  payload\n}) {\n  const {\n    keyword\n  } = payload;\n  delay(500);\n  const listWorks = yield workApis.getList().then(res => {\n    const {\n      data\n    } = res;\n    return data;\n  });\n  console.log(keyword);\n  console.log(listWorks);\n  const filterWorks = listWorks.filter(work => work.name_work.trim().toLowerCase().includes(keyword.trim().toLowerCase()));\n  console.log(filterWorks);\n  yield put(fetchWorksSuccess(filterWorks));\n}\n\nfunction* addWorkSaga({\n  payload\n}) {\n  const {\n    name_work,\n    description,\n    time,\n    userId,\n    status\n  } = payload.work;\n  yield put(showLoading());\n  const resp = yield call(addWork, {\n    name_work,\n    description,\n    time,\n    userId,\n    status\n  });\n  const {\n    data\n  } = resp;\n\n  if (resp.status === 201) {\n    yield put(addWorkSuccess(data));\n  }\n\n  yield put(hideModal());\n  delay(500);\n  yield put(hideLoading());\n}\n\nfunction* rootSaga() {\n  yield fork(watchFetchListWorkAction);\n  yield takeLatest(workTypes.FILTER_WORKS, filterWorkSaga);\n  yield takeEvery(workTypes.ADD_WORKS, addWorkSaga);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/home/thienncb/Desktop/redux-saga/src/sagas/index.js"],"names":["fork","take","call","put","delay","takeLatest","select","takeEvery","workTypes","getList","addWork","showLoading","hideLoading","fetchWorksSuccess","fetchWorksFailed","addWorkSuccess","toast","hideModal","imp","watchFetchListWorkAction","FETCH_WORKS","res","status","data","success","err","error","filterWorkSaga","payload","keyword","listWorks","workApis","then","console","log","filterWorks","filter","work","name_work","trim","toLowerCase","includes","addWorkSaga","description","time","userId","resp","rootSaga","FILTER_WORKS","ADD_WORKS"],"mappings":"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","sourcesContent":["import { fork, take,call,put,delay, takeLatest, select, takeEvery} from \"redux-saga/effects\";\nimport * as workTypes from \"../constansts/work\";\nimport {getList,addWork} from '../apis/work';\nimport {showLoading , hideLoading} from '../actions/loading';;\nimport {fetchWorksSuccess, fetchWorksFailed, addWorkSuccess} from '../actions/work';\nimport { toast } from 'react-toastify';\nimport { hideModal } from \"../actions/modal\";\nimp\n// các công việc đã thực hiện\n// bươc 1: xử lý hàm fetch_works\n// bước 2: thực hiện call api\n// bước 3: nếu success thì sẽ trả về data\n// bước 4: chạy hàm fetchWorksSuccess\n// bước 5: thực thi những hàm còn lại\nfunction* watchFetchListWorkAction() {\n    yield take(workTypes.FETCH_WORKS);\n    yield put(showLoading());\n    const res = yield call(getList);\n    const {status, data} = res;\n    if(status === 200){\n        yield put(fetchWorksSuccess(data));\n        yield toast.success(\"Lấy dữ liệu thành công\");\n    }else{\n        yield put(fetchWorksFailed(err));\n        yield toast.error(\"lấy dữ liệu thất bại\");\n    }\n    yield delay(1000);\n    yield put(hideLoading());\n }\n function* filterWorkSaga({payload}){\n     const {keyword} = payload;\n     delay(500);\n     const listWorks = yield workApis.getList().then(res => {\n        const {data} = res;\n        return data;\n    });\n     console.log(keyword);\n     console.log(listWorks);\n     const filterWorks = listWorks.filter(\n        work => work.name_work\n        .trim()\n        .toLowerCase()\n        .includes(keyword.trim().toLowerCase())\n\n     );\n    console.log(filterWorks);\n     yield put(fetchWorksSuccess(filterWorks));\n }\n function* addWorkSaga ({payload}){\n    const {name_work,description, time, userId,status} = payload.work;\n    yield put(showLoading());\n    const resp = yield call(addWork,{\n        name_work,\n        description,\n        time,\n        userId,\n        status\n    });\n    const {data} = resp;\n    if(resp.status === 201){\n        yield put(addWorkSuccess(data));\n    }\n    yield put(hideModal());\n    delay(500);\n    yield put(hideLoading());\n }\nfunction* rootSaga(){\n    yield fork(watchFetchListWorkAction);\n    yield takeLatest(workTypes.FILTER_WORKS, filterWorkSaga);\n    yield takeEvery(workTypes.ADD_WORKS,addWorkSaga);\n}\n\n\nexport default rootSaga;\n"]},"metadata":{},"sourceType":"module"}