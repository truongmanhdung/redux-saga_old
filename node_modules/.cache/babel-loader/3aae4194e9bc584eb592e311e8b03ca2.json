{"ast":null,"code":"import { fork, take, call, put, delay, takeLatest, select } from \"redux-saga/effects\";\nimport * as workTypes from \"../constansts/work\";\nimport { getList } from '../apis/work';\nimport { showLoading, hideLoading } from '../actions/loading';\n;\nimport { fetchWorksSuccess, fetchWorksFailed } from '../actions/work';\nimport { toast } from 'react-toastify';\nimport * as workApis from \"../apis/work\"; // các công việc đã thực hiện\n// bươc 1: xử lý hàm fetch_works\n// bước 2: thực hiện call api\n// bước 3: nếu success thì sẽ trả về data\n// bước 4: chạy hàm fetchWorksSuccess\n// bước 5: thực thi những hàm còn lại\n\nfunction* watchFetchListWorkAction() {\n  yield take(workTypes.FETCH_WORKS);\n  yield put(showLoading());\n  const res = yield call(getList);\n  const {\n    status,\n    data\n  } = res;\n\n  if (status === 200) {\n    yield put(fetchWorksSuccess(data));\n    yield toast.success(\"Lấy dữ liệu thành công\");\n  } else {\n    yield put(fetchWorksFailed(err));\n    yield toast.error(\"lấy dữ liệu thất bại\");\n  }\n\n  yield delay(1000);\n  yield put(hideLoading());\n}\n\nfunction* filterWorkSaga({\n  payload\n}) {\n  const {\n    keyword\n  } = payload;\n  const listWorks = yield workApis.getList().then(res => {\n    const {\n      data\n    } = res;\n    return data;\n  });\n  console.log(keyword);\n  console.log(listWorks);\n  const filterWorks = listWorks.filter(work => work.name_work.trim().toLowerCase().includes(keyword.trim().toLowerCase()));\n  con;\n  yield put(fetchWorksSuccess(filterWorks));\n}\n\nfunction* rootSaga() {\n  yield fork(watchFetchListWorkAction);\n  yield takeLatest(workTypes.FILTER_WORKS, filterWorkSaga);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/home/thienncb/Desktop/redux-saga/src/sagas/index.js"],"names":["fork","take","call","put","delay","takeLatest","select","workTypes","getList","showLoading","hideLoading","fetchWorksSuccess","fetchWorksFailed","toast","workApis","watchFetchListWorkAction","FETCH_WORKS","res","status","data","success","err","error","filterWorkSaga","payload","keyword","listWorks","then","console","log","filterWorks","filter","work","name_work","trim","toLowerCase","includes","con","rootSaga","FILTER_WORKS"],"mappings":"AAAA,SAASA,IAAT,EAAeC,IAAf,EAAoBC,IAApB,EAAyBC,GAAzB,EAA6BC,KAA7B,EAAoCC,UAApC,EAAgDC,MAAhD,QAA6D,oBAA7D;AACA,OAAO,KAAKC,SAAZ,MAA2B,oBAA3B;AACA,SAAQC,OAAR,QAAsB,cAAtB;AACA,SAAQC,WAAR,EAAsBC,WAAtB,QAAwC,oBAAxC;AAA6D;AAC7D,SAAQC,iBAAR,EAA2BC,gBAA3B,QAAkD,iBAAlD;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAO,KAAKC,QAAZ,MAA0B,cAA1B,C,CACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAUC,wBAAV,GAAqC;AACjC,QAAMd,IAAI,CAACM,SAAS,CAACS,WAAX,CAAV;AACA,QAAMb,GAAG,CAACM,WAAW,EAAZ,CAAT;AACA,QAAMQ,GAAG,GAAG,MAAMf,IAAI,CAACM,OAAD,CAAtB;AACA,QAAM;AAACU,IAAAA,MAAD;AAASC,IAAAA;AAAT,MAAiBF,GAAvB;;AACA,MAAGC,MAAM,KAAK,GAAd,EAAkB;AACd,UAAMf,GAAG,CAACQ,iBAAiB,CAACQ,IAAD,CAAlB,CAAT;AACA,UAAMN,KAAK,CAACO,OAAN,CAAc,wBAAd,CAAN;AACH,GAHD,MAGK;AACD,UAAMjB,GAAG,CAACS,gBAAgB,CAACS,GAAD,CAAjB,CAAT;AACA,UAAMR,KAAK,CAACS,KAAN,CAAY,sBAAZ,CAAN;AACH;;AACD,QAAMlB,KAAK,CAAC,IAAD,CAAX;AACA,QAAMD,GAAG,CAACO,WAAW,EAAZ,CAAT;AACF;;AACD,UAAUa,cAAV,CAAyB;AAACC,EAAAA;AAAD,CAAzB,EAAmC;AAC/B,QAAM;AAACC,IAAAA;AAAD,MAAYD,OAAlB;AACA,QAAME,SAAS,GAAG,MAAMZ,QAAQ,CAACN,OAAT,GAAmBmB,IAAnB,CAAwBV,GAAG,IAAI;AACpD,UAAM;AAACE,MAAAA;AAAD,QAASF,GAAf;AACA,WAAOE,IAAP;AACH,GAHwB,CAAxB;AAIAS,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACA,QAAMI,WAAW,GAAGJ,SAAS,CAACK,MAAV,CACjBC,IAAI,IAAIA,IAAI,CAACC,SAAL,CACPC,IADO,GAEPC,WAFO,GAGPC,QAHO,CAGEX,OAAO,CAACS,IAAR,GAAeC,WAAf,EAHF,CADS,CAApB;AAOAE,EAAAA,GAAG;AACH,QAAMlC,GAAG,CAACQ,iBAAiB,CAACmB,WAAD,CAAlB,CAAT;AACH;;AACF,UAAUQ,QAAV,GAAoB;AAChB,QAAMtC,IAAI,CAACe,wBAAD,CAAV;AACA,QAAMV,UAAU,CAACE,SAAS,CAACgC,YAAX,EAAyBhB,cAAzB,CAAhB;AACH;;AAGD,eAAee,QAAf","sourcesContent":["import { fork, take,call,put,delay, takeLatest, select} from \"redux-saga/effects\";\nimport * as workTypes from \"../constansts/work\";\nimport {getList} from '../apis/work';\nimport {showLoading , hideLoading} from '../actions/loading';;\nimport {fetchWorksSuccess, fetchWorksFailed} from '../actions/work';\nimport { toast } from 'react-toastify';\nimport * as workApis from \"../apis/work\";\n// các công việc đã thực hiện\n// bươc 1: xử lý hàm fetch_works\n// bước 2: thực hiện call api\n// bước 3: nếu success thì sẽ trả về data\n// bước 4: chạy hàm fetchWorksSuccess\n// bước 5: thực thi những hàm còn lại\nfunction* watchFetchListWorkAction() {\n    yield take(workTypes.FETCH_WORKS);\n    yield put(showLoading());\n    const res = yield call(getList);\n    const {status, data} = res;\n    if(status === 200){\n        yield put(fetchWorksSuccess(data));\n        yield toast.success(\"Lấy dữ liệu thành công\");\n    }else{\n        yield put(fetchWorksFailed(err));\n        yield toast.error(\"lấy dữ liệu thất bại\");\n    }\n    yield delay(1000);\n    yield put(hideLoading());\n }\n function* filterWorkSaga({payload}){\n     const {keyword} = payload;\n     const listWorks = yield workApis.getList().then(res => {\n        const {data} = res;\n        return data;\n    });\n     console.log(keyword);\n     console.log(listWorks);\n     const filterWorks = listWorks.filter(\n        work => work.name_work\n        .trim()\n        .toLowerCase()\n        .includes(keyword.trim().toLowerCase())\n\n     );\n     con\n     yield put(fetchWorksSuccess(filterWorks));\n }\nfunction* rootSaga(){\n    yield fork(watchFetchListWorkAction);\n    yield takeLatest(workTypes.FILTER_WORKS, filterWorkSaga);\n}\n\n\nexport default rootSaga;\n"]},"metadata":{},"sourceType":"module"}