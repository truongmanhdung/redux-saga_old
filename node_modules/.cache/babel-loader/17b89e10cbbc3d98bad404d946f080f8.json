{"ast":null,"code":"import * as workTypes from \"../constansts/work\";\nconst initialState = {};\n\nvar findIndex = (works, id) => {\n  var result = -1;\n  works.forEach((work, index) => {\n    if (work.id === id) {\n      result = index;\n    }\n  });\n  return result;\n};\n\nconst myReducers = (state = initialState, action) => {\n  switch (action.type) {\n    case workTypes.FETCH_WORKS:\n      {\n        return { ...state,\n          listWorks: [],\n          workEditing: null\n        };\n      }\n      ;\n\n    case workTypes.FETCH_WORKS_SUCCESS:\n      {\n        const {\n          data\n        } = action.payload;\n        return { ...state,\n          listWorks: data\n        };\n      }\n      ;\n\n    case workTypes.FETCH_WORKS_FAILED:\n      {\n        const {\n          err\n        } = action.payload;\n        return { ...state,\n          listWorks: []\n        };\n      }\n      ;\n\n    case workTypes.ADD_WORKS:\n      {\n        return { ...state\n        };\n      }\n      ;\n\n    case workTypes.ADD_WORK_SUCCESS:\n      {\n        const {\n          work\n        } = action.payload;\n        state.listWorks.push(work);\n        return { ...state,\n          listWorks: state.listWorks\n        };\n      }\n      ;\n\n    case workTypes.EDIT_WORKS:\n      {\n        const {\n          work\n        } = action.payload;\n        return { ...state,\n          workEditing: work\n        };\n      }\n      ;\n    // case workTypes.FILTER_WORKS: {\n    //     return ;\n    // };\n\n    case workTypes.FILTER_WORKS_SUCCESS:\n      {\n        const {\n          data\n        } = action.payload;\n        return { ...state,\n          listWorks: data\n        };\n      }\n      ;\n\n    case workTypes.UPDATE_WORKS:\n      {\n        return { ...state\n        };\n      }\n      ;\n\n    case workTypes.UPDATE_WORK_SUCCESS:\n      {\n        const {\n          data\n        } = action.payload;\n        const {\n          listWorks\n        } = state;\n        const index = listWorks.findIndex(item => item.id === data.id);\n\n        if (index !== -1) {\n          const newList = [];\n        } else {\n          return { ...state\n          };\n        }\n      }\n      ;\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nexport default myReducers;","map":{"version":3,"sources":["/home/thienncb/Desktop/redux-saga/src/reducers/works.js"],"names":["workTypes","initialState","findIndex","works","id","result","forEach","work","index","myReducers","state","action","type","FETCH_WORKS","listWorks","workEditing","FETCH_WORKS_SUCCESS","data","payload","FETCH_WORKS_FAILED","err","ADD_WORKS","ADD_WORK_SUCCESS","push","EDIT_WORKS","FILTER_WORKS_SUCCESS","UPDATE_WORKS","UPDATE_WORK_SUCCESS","item","newList"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,oBAA3B;AACA,MAAMC,YAAY,GAAG,EAArB;;AACA,IAAIC,SAAS,GAAG,CAACC,KAAD,EAAOC,EAAP,KAAY;AACxB,MAAIC,MAAM,GAAG,CAAC,CAAd;AACAF,EAAAA,KAAK,CAACG,OAAN,CAAc,CAACC,IAAD,EAAMC,KAAN,KAAc;AAC1B,QAAGD,IAAI,CAACH,EAAL,KAAYA,EAAf,EAAkB;AAChBC,MAAAA,MAAM,GAAGG,KAAT;AACD;AACF,GAJD;AAKA,SAAOH,MAAP;AAED,CATH;;AAUA,MAAMI,UAAU,GAAG,CAACC,KAAK,GAAGT,YAAT,EAAuBU,MAAvB,KAAkC;AACjD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKZ,SAAS,CAACa,WAAf;AAA4B;AACxB,eAAO,EACH,GAAGH,KADA;AAEHI,UAAAA,SAAS,EAAE,EAFR;AAGHC,UAAAA,WAAW,EAAE;AAHV,SAAP;AAKH;AAAA;;AACD,SAAKf,SAAS,CAACgB,mBAAf;AAAoC;AAChC,cAAM;AAAEC,UAAAA;AAAF,YAAWN,MAAM,CAACO,OAAxB;AACA,eAAO,EACH,GAAGR,KADA;AAEHI,UAAAA,SAAS,EAAEG;AAFR,SAAP;AAIH;AAAA;;AACD,SAAKjB,SAAS,CAACmB,kBAAf;AAAmC;AAC/B,cAAM;AAAEC,UAAAA;AAAF,YAAUT,MAAM,CAACO,OAAvB;AACA,eAAO,EACH,GAAGR,KADA;AAEHI,UAAAA,SAAS,EAAE;AAFR,SAAP;AAIH;AAAA;;AACD,SAAKd,SAAS,CAACqB,SAAf;AAA0B;AACtB,eAAO,EACH,GAAGX;AADA,SAAP;AAGH;AAAA;;AACD,SAAKV,SAAS,CAACsB,gBAAf;AAAiC;AAC7B,cAAM;AAAEf,UAAAA;AAAF,YAAWI,MAAM,CAACO,OAAxB;AACAR,QAAAA,KAAK,CAACI,SAAN,CAAgBS,IAAhB,CAAqBhB,IAArB;AACA,eAAO,EACH,GAAGG,KADA;AAEHI,UAAAA,SAAS,EAAEJ,KAAK,CAACI;AAFd,SAAP;AAIH;AAAA;;AACD,SAAKd,SAAS,CAACwB,UAAf;AAA2B;AACvB,cAAM;AAACjB,UAAAA;AAAD,YAASI,MAAM,CAACO,OAAtB;AACA,eAAO,EAEH,GAAGR,KAFA;AAGHK,UAAAA,WAAW,EAAER;AAHV,SAAP;AAKH;AAAA;AACD;AACA;AACA;;AAEA,SAAKP,SAAS,CAACyB,oBAAf;AAAqC;AACjC,cAAM;AAAER,UAAAA;AAAF,YAAWN,MAAM,CAACO,OAAxB;AACA,eAAO,EACH,GAAGR,KADA;AAEHI,UAAAA,SAAS,EAAEG;AAFR,SAAP;AAIH;AAAA;;AACD,SAAKjB,SAAS,CAAC0B,YAAf;AAA6B;AACzB,eAAO,EACH,GAAGhB;AADA,SAAP;AAGH;AAAA;;AACD,SAAKV,SAAS,CAAC2B,mBAAf;AAAoC;AAChC,cAAM;AAAEV,UAAAA;AAAF,YAAWN,MAAM,CAACO,OAAxB;AACA,cAAM;AAACJ,UAAAA;AAAD,YAAcJ,KAApB;AACA,cAAMF,KAAK,GAAGM,SAAS,CAACZ,SAAV,CAAoB0B,IAAI,IAAEA,IAAI,CAACxB,EAAL,KAAUa,IAAI,CAACb,EAAzC,CAAd;;AACA,YAAGI,KAAK,KAAG,CAAC,CAAZ,EAAc;AACV,gBAAMqB,OAAO,GAAG,EAAhB;AAGH,SAJD,MAIK;AACD,iBAAO,EACH,GAAGnB;AADA,WAAP;AAGH;AACJ;AAAA;;AACD;AACI,aAAOA,KAAP;AA1ER;;AA2EC;AACJ,CA7ED;;AA+EA,eAAeD,UAAf","sourcesContent":["import * as workTypes from \"../constansts/work\";\nconst initialState = {};\nvar findIndex = (works,id)=>{\n    var result = -1;\n    works.forEach((work,index)=>{\n      if(work.id === id){\n        result = index;\n      }\n    });\n    return result;\n    \n  }\nconst myReducers = (state = initialState, action) => {\n    switch (action.type) {\n        case workTypes.FETCH_WORKS: {\n            return {\n                ...state,\n                listWorks: [],\n                workEditing: null\n            };\n        };\n        case workTypes.FETCH_WORKS_SUCCESS: {\n            const { data } = action.payload;\n            return {\n                ...state,\n                listWorks: data,\n            };\n        };\n        case workTypes.FETCH_WORKS_FAILED: {\n            const { err } = action.payload;\n            return {\n                ...state,\n                listWorks: [],\n            };\n        };\n        case workTypes.ADD_WORKS: {\n            return {\n                ...state,\n            };\n        };\n        case workTypes.ADD_WORK_SUCCESS: {\n            const { work } = action.payload;\n            state.listWorks.push(work);\n            return {\n                ...state,\n                listWorks: state.listWorks,\n            };\n        };\n        case workTypes.EDIT_WORKS: {\n            const {work} = action.payload;\n            return {\n                \n                ...state,\n                workEditing: work\n            };\n        };\n        // case workTypes.FILTER_WORKS: {\n        //     return ;\n        // };\n\n        case workTypes.FILTER_WORKS_SUCCESS: {\n            const { data } = action.payload;\n            return {\n                ...state,\n                listWorks: data,\n            };\n        };\n        case workTypes.UPDATE_WORKS: {\n            return {\n                ...state,\n            };\n        };\n        case workTypes.UPDATE_WORK_SUCCESS: {\n            const { data } = action.payload;\n            const {listWorks} = state;\n            const index = listWorks.findIndex(item=>item.id===data.id);\n            if(index!==-1){\n                const newList = [\n                    \n                ];\n            }else{\n                return {\n                    ...state,\n                };\n            }\n        };\n        default:\n            return state;\n    };\n};\n\nexport default myReducers;\n"]},"metadata":{},"sourceType":"module"}