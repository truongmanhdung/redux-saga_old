{"ast":null,"code":"import * as types from \"./../constants/ActionTypes\";\nimport callAPI from \"../utils/apiCaller\";\nexport const listAll = () => {\n  return {\n    type: types.LIST_ALL\n  };\n};\nexport const fetchWorksRequest = () => {\n  return async dispatch => {\n    if (localStorage.getItem(\"user\")) {\n      var id_user = localStorage.getItem(\"user\");\n      const res = await callAPI(`users/${id_user}/works`, \"GET\", null);\n      dispatch(fetchWorks(res.data));\n    }\n  };\n};\nexport const fetchWorks = works => {\n  return {\n    type: types.FETCH_WORKS,\n    works\n  };\n};\nexport const deleteWorksRequest = id => {\n  return async dispatch => {\n    var id_user = localStorage.getItem(\"user\");\n    const res = await callAPI(`users/${id_user}/works/${id}`, \"DELETE\", null);\n\n    if (res.status === 200) {\n      dispatch(deleteWorks(id));\n    }\n  };\n};\nexport const deleteWorks = id => {\n  return {\n    type: types.DELETE_WORKS,\n    id\n  };\n};\nexport const addWorksRequest = work => {\n  return async dispatch => {\n    var id_user = localStorage.getItem(\"user\");\n    const res = await callAPI(`users/${id_user}/works`, \"POST\", work);\n    dispatch(addWorks(res.data));\n  };\n};\nexport const addWorks = work => {\n  return {\n    type: types.ADD_WORKS,\n    work\n  };\n};\nexport const updateStatusRequest = work => {\n  return async dispatch => {\n    var id_user = localStorage.getItem(\"user\");\n    callAPI(`users/${id_user}/works/${work.id}`, \"PUT\", {\n      status: !work.status\n    }).then(res => {\n      dispatch(updateStatus(res.data));\n    });\n  };\n};\nexport const updateStatus = work => {\n  return {\n    type: types.UPDATE_STATUS,\n    work\n  };\n};\nexport const getWorksRequest = id => {\n  return async dispatch => {\n    var id_user = localStorage.getItem(\"user\");\n    const res = await callAPI(`users/${id_user}/works/${id}`, \"GET\", null);\n    dispatch(editWorks(res.data));\n  };\n};\nexport const editWorks = work => {\n  return {\n    type: types.EDIT_WORKS,\n    work\n  };\n};\nexport const updateWorksRequest = work => {\n  return async dispatch => {\n    var id_user = localStorage.getItem(\"user\");\n    callAPI(`users/${id_user}/works/${work.id}`, \"PUT\", work).then(res => {\n      dispatch(updateWorks(res.data));\n    });\n  };\n};\nexport const updateWorks = work => {\n  return {\n    type: types.UPDATE_WORKS,\n    work\n  };\n};\nexport const login = user => {\n  return {\n    type: types.LOGIN,\n    user\n  };\n};","map":{"version":3,"sources":["/home/thienncb/Desktop/redux-saga/src/actions/index.js"],"names":["types","callAPI","listAll","type","LIST_ALL","fetchWorksRequest","dispatch","localStorage","getItem","id_user","res","fetchWorks","data","works","FETCH_WORKS","deleteWorksRequest","id","status","deleteWorks","DELETE_WORKS","addWorksRequest","work","addWorks","ADD_WORKS","updateStatusRequest","then","updateStatus","UPDATE_STATUS","getWorksRequest","editWorks","EDIT_WORKS","updateWorksRequest","updateWorks","UPDATE_WORKS","login","user","LOGIN"],"mappings":"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","sourcesContent":["import * as types from \"./../constants/ActionTypes\";\nimport callAPI from \"../utils/apiCaller\";\nexport const listAll = () => {\n    return {\n        type: types.LIST_ALL,\n    };\n};\n\nexport const fetchWorksRequest = () => {\n    return async (dispatch) => {\n        if (localStorage.getItem(\"user\")) {\n            var id_user = localStorage.getItem(\"user\");\n            const res = await callAPI(`users/${id_user}/works`, \"GET\", null);\n            dispatch(fetchWorks(res.data));\n        }\n    };\n};\n\nexport const fetchWorks = (works) => {\n    return {\n        type: types.FETCH_WORKS,\n        works,\n    };\n};\n\nexport const deleteWorksRequest = (id) => {\n    return async (dispatch) => {\n        var id_user = localStorage.getItem(\"user\");\n        const res = await callAPI(\n            `users/${id_user}/works/${id}`,\n            \"DELETE\",\n            null\n        );\n        if (res.status === 200) {\n            dispatch(deleteWorks(id));\n        }\n    };\n};\n\nexport const deleteWorks = (id) => {\n    return {\n        type: types.DELETE_WORKS,\n        id,\n    };\n};\n\nexport const addWorksRequest = (work) => {\n    return async (dispatch) => {\n        var id_user = localStorage.getItem(\"user\");\n        const res = await callAPI(`users/${id_user}/works`, \"POST\", work);\n        dispatch(addWorks(res.data));\n    };\n};\n\nexport const addWorks = (work) => {\n    return {\n        type: types.ADD_WORKS,\n        work,\n    };\n};\n\nexport const updateStatusRequest = (work) => {\n    return async (dispatch) => {\n        var id_user = localStorage.getItem(\"user\");\n        callAPI(`users/${id_user}/works/${work.id}`, \"PUT\", {\n            status: !work.status,\n        }).then((res) => {\n            dispatch(updateStatus(res.data));\n        });\n    };\n};\n\nexport const updateStatus = (work) => {\n    return {\n        type: types.UPDATE_STATUS,\n        work,\n    };\n};\n\nexport const getWorksRequest = (id) => {\n    return async (dispatch) => {\n        var id_user = localStorage.getItem(\"user\");\n        const res = await callAPI(`users/${id_user}/works/${id}`, \"GET\", null);\n        dispatch(editWorks(res.data));\n    };\n};\n\nexport const editWorks = (work) => {\n    return {\n        type: types.EDIT_WORKS,\n        work,\n    };\n};\n\nexport const updateWorksRequest = (work) => {\n    return async (dispatch) => {\n        var id_user = localStorage.getItem(\"user\");\n        callAPI(`users/${id_user}/works/${work.id}`, \"PUT\", work).then(\n            (res) => {\n                dispatch(updateWorks(res.data));\n            }\n        );\n    };\n};\n\nexport const updateWorks = (work) => {\n    return {\n        type: types.UPDATE_WORKS,\n        work,\n    };\n};\n\nexport const login = (user) => {\n    return {\n        type: types.LOGIN,\n        user,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}